
plugins {
    id "com.github.maiflai.scalatest" version "0.6-5-g9065d91"
}

apply plugin: 'scala'
apply plugin: 'idea'

repositories {
    mavenCentral()
}

// Pick the Linux version, as it is a tar.gz, since we can simply extract that
def IDEA_SDK_URL = 'http://download.jetbrains.com/idea/ideaIC-14.0.4.tar.gz'
def IDEA_SDK_NAME = 'IntelliJ IDEA Community Edition IC-139.1603.1'

configurations {
    ideaSdk
    bundle // dependencies bundled with the plugin
}

dependencies {
    ideaSdk fileTree(dir: 'lib/sdk/', include: ['*/lib/*.jar'])
    bundle 'org.scala-lang:scala-library:2.11.6'
    bundle('org.fitnesse:fitnesse:20150424') {
        exclude module: 'org.eclipse.jgit'
        exclude module: 'diffutils'
    }

    compile configurations.ideaSdk
    compile configurations.bundle
    testCompile 'org.scalatest:scalatest_2.11:2.2.4'
    testCompile 'org.mockito:mockito-core:1.10.19'

    // Scalatest requires:
    testRuntime 'org.pegdown:pegdown:1.5.0'
}

sourceCompatibility = 1.6
targetCompatibility = 1.6

sourceSets.main.scala.srcDir "src/main/jflex"

task downloadIdeaSdk(type: Download) {
    sourceUrl = IDEA_SDK_URL
    target = file('lib/idea-sdk.tar.gz')
}

task downloadIdeaJFlex(type: Download) {
    sourceUrl = 'https://github.com/JetBrains/intellij-community/raw/master/tools/lexer/jflex-1.4/lib/JFlex.jar'
    target = file('lib/flex/JFlex.jar')
}

task downloadIdeaJFlexSkeleton(type: Download) {
    sourceUrl = 'https://raw.github.com/JetBrains/intellij-community/master/tools/lexer/idea-flex.skeleton'
    target = file('lib/flex/idea-flex.skeleton')
}

task extractIdeaSdk(type: Copy, dependsOn: [downloadIdeaSdk]) {
    def zipFile = file('lib/idea-sdk.tar.gz')
    def outputDir = file("lib/sdk")

    from tarTree(resources.gzip(zipFile))
    into outputDir
}

task lexer(type: JavaExec, dependsOn: [downloadIdeaJFlex, downloadIdeaJFlexSkeleton]) {
    classpath(files('lib/flex/JFlex.jar'))
    inputs.file 'src/main/jflex/fitnesse/idea/lang/lexer/Fitnesse.flex'
    outputs.file 'src/main/jflex/fitnesse/idea/lang/lexer/_FitnesseLexer.java'

    main 'JFlex.Main'
    args "-sliceandcharat", "-skel", 'lib/flex/idea-flex.skeleton',
                "-d", 'src/main/jflex/fitnesse/idea/lang/lexer',
                "-q", 'src/main/jflex/fitnesse/idea/lang/lexer/Fitnesse.flex'
    jvmArgs '-Dfile.encoding=UTF-8'
}

task cleanLexer(type: Delete) {
  delete 'src/main/jflex/fitnesse/idea/lang/lexer/_FitnesseLexer.java'
}

test {
    // Avoid parallel execution, since the IntelliJ boilerplate is not up to that
    maxParallelForks = 1
}

task dist(type: Zip, dependsOn: [jar, test]) {
    from configurations.bundle
    from jar.archivePath
    rename { f -> "lib/${f}" }
    into 'idea-fitnesse'
    baseName 'idea-fitnesse'
}

clean.dependsOn cleanLexer
compileScala.dependsOn lexer, extractIdeaSdk

// ========= Workspace setup tasks ========= //

idea {
    project {
        languageLevel = '1.6'
        jdkName = IDEA_SDK_NAME

        ipr {
            withXml {
                it.node.find { node ->
                    node.@name == 'ProjectRootManager'
                }.'@project-jdk-type' = 'IDEA JDK'

                logger.warn "=" * 71
                logger.warn " Configured IDEA JDK '${jdkName}'."
                logger.warn " Make sure you have it configured IntelliJ before opening the project!"
                logger.warn "=" * 71
            }
        }
    }

    module {
        scopes.COMPILE.minus = [ configurations.ideaSdk ]

        iml {
            beforeMerged { module ->
                module.dependencies.clear()
            }
            withXml {
                it.node.@type = 'PLUGIN_MODULE'
                //  <component name="DevKit.ModuleBuildProperties" url="file://$MODULE_DIR$/src/main/resources/META-INF/plugin.xml" />
                def cmp = it.node.appendNode('component')
                cmp.@name = 'DevKit.ModuleBuildProperties'
                cmp.@url = 'file://$MODULE_DIR$/src/main/resources/META-INF/plugin.xml'
            }
        }
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.3'
}

// ========= Custom tasks ========= //

class Download extends DefaultTask {
    @Input
    String sourceUrl

    @OutputFile
    File target

    @TaskAction
    void download() {
       if (!target.parentFile.exists()) {
           target.parentFile.mkdirs()
       }
       ant.get(src: sourceUrl, dest: target, skipexisting: 'true')
    }
}
